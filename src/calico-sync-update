#!/bin/sh

set -e

USAGE="Usage: calico-sync-update <Event> <Channel>"

function main {
    local EVENT="$1"
    local CHANNEL="$2"
    local CHANNEL_DATA

    if [ -z "${EVENT}" ] || [ -z "${CHANNEL}" ]; then usage; fi

    echo "Got ${EVENT} on ${CHANNEL}..."
    if [ "${EVENT}" != "c" ]; then return; fi

    CHANNEL_DATA="$(cat "${CHANNEL}")"
    echo -e "### Data\\n${CHANNEL_DATA}\\n###"
    if [ -z "${CHANNEL_DATA}" ]; then return; fi

    echo "Applying data..."
    update_calico_config "${CHANNEL_DATA}"

    echo
    echo "Cleaning channel..."
    true > "${CHANNEL}"
}

function update_calico_config {
    local ETCD_ENDPOINTS="$1"
    local ETCD_KEY_FILE="/etc/cni/net.d/calico-tls/etcd-key"
    local ETCD_CERT_FILE="/etc/cni/net.d/calico-tls/etcd-cert"
    local ETCD_CA_CERT_FILE="/etc/cni/net.d/calico-tls/etcd-ca"
    local KUBECONFIG_FILEPATH="/etc/cni/net.d/calico-kubeconfig"

    kubectl get configmap calico-config \
            --namespace kube-system \
            --output jsonpath="{.data.cni_network_config}" \
        |
        sed -e "s~__ETCD_ENDPOINTS__~${ETCD_ENDPOINTS}~" \
            -e "s~__ETCD_KEY_FILE__~${ETCD_KEY_FILE}~" \
            -e "s~__ETCD_CERT_FILE__~${ETCD_CERT_FILE}~" \
            -e "s~__ETCD_CA_CERT_FILE__~${ETCD_CA_CERT_FILE}~" \
            -e "s~__KUBECONFIG_FILEPATH__~${KUBECONFIG_FILEPATH}~" \
            |
            tee /etc/cni/net.d/10-calico.conflist
}

function kubectl {
    local SERVICE_ACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
    local CACERT="${SERVICE_ACCOUNT}/ca.crt"
    local TOKEN; TOKEN="$(cat "${SERVICE_ACCOUNT}/token")"

    /bin/kubectl --token "${TOKEN}" --certificate-authority "${CACERT}" "$@"
}

function usage {
    >&2 echo "${USAGE}"
    exit 2
}

main "$@"
